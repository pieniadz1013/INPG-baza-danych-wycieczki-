/*funkcja dodaj¹ca pozycjê*/

int Insert (Drzewo** korzen, Pozycja* nowa_pozycja)
{
    if(korzen == NULL || nowa_pozycja == NULL)
    {
        return -1;
    }
    Wezel* nowy;
    nowy = (Wezel*) malloc(sizeof(Wezel));
    if(nowy != NULL)
    {
        nowy->pozycja = nowa_pozycja;
        nowy->lewy = NULL;
        nowy->prawy = NULL;
    }
    else
    {
        printf("Nie udalo sie utworzyc nowego wezla");
        return -1;
    }
    if(*korzen == NULL)
    {
        *korzen = nowy;
        return 0;
    }
    Wezel* rodzic = *korzen;
    while(1)
    {
        int porownanie;
        porownanie = strcmp (nowa_pozycja->nazwisko, rodzic->pozycja->nazwisko);
        if(porownanie == 0) //to samo nazwisko
        {
            porownanie = strcmp (nowa_pozycja->imie, rodzic->pozycja->imie);
            if(porownanie == 0)
            {
                printf("Istnieje juz osoba o tym imieniu i nazwisku");
                return 0;
            }
            else if(porownanie > 0)
            {
                if(lewy->pozycja == NULL)
                {
                    rodzic->lewy = nowy;
                    return 0;
                }
                else
                {
                    rodzic = rodzic->lewy;
                }
            }
            else
            {
                if(prawy->pozycja == NULL)
                {
                    rodzic->prawy = nowy;
                    return 0;
                }
                else
                {
                    rodzic = rodzic->prawy;
                }
            }
        }
        else if(porownanie > 0)
        {
            if(lewy->pozycja == NULL)
            {
                rodzic->lewy = nowy;
                return 0;
            }
            else
            {
                rodzic = rodzic->lewy;
            }
        }
        else
        {
            if(prawy->pozycja == NULL)
            {
                rodzic->prawy = nowy;
                return 0;
            }
            else
            {
                rodzic = rodzic->prawy;
            }
        }
        
    }
    return 0;
}