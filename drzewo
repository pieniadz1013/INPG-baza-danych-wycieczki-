#include "DRZEWO.H"

void Free(Wezel** korzen)
{
    if(korzen == NULL)
        return;
    if(*korzen == NULL)
        return;
    if((*korzen)->lewy != NULL)
        Free(&((*korzen)->lewy));
    if((*korzen)->prawy != NULL)
        Free(&((*korzen)->prawy));
    free((*korzen)->pozycja->numery);
    free((*korzen)->pozycja);
    free(*korzen);
    *korzen = NULL;
}

int Insert (Wezel** korzen, Wycieczka* nowa_pozycja)
{
    if(korzen == NULL || nowa_pozycja == NULL)
    {
        return -1;
    }
    Wezel* nowy;
    nowy = (Wezel*) malloc(sizeof(Wezel));
    if(nowy != NULL)
    {
        nowy->pozycja = nowa_pozycja;
        nowy->lewy = NULL;
        nowy->prawy = NULL;
    }
    else
    {
        printf("Nie udalo sie utworzyc nowego wezla");
        return -1;
    }
    if(*korzen == NULL)
    {
        *korzen = nowy;
        return 0;
    }
    Wezel* rodzic = *korzen;
    while(1)
    {
        int porownanie;
        porownanie = strcmp (nowa_pozycja->nazwisko, rodzic->pozycja->nazwisko);
        if(porownanie == 0) //to samo nazwisko
        {
            porownanie = strcmp (nowa_pozycja->imie, rodzic->pozycja->imie);
            if(porownanie == 0)
            {
                printf("Istnieje juz osoba o tym imieniu i nazwisku");
                return 0;
            }
            else if(porownanie > 0)
            {
                if(lewy->pozycja == NULL)
                {
                    rodzic->lewy = nowy;
                    return 0;
                }
                else
                {
                    rodzic = rodzic->lewy;
                }
            }
            else
            {
                if(prawy->pozycja == NULL)
                {
                    rodzic->prawy = nowy;
                    return 0;
                }
                else
                {
                    rodzic = rodzic->prawy;
                }
            }
        }
        else if(porownanie > 0)
        {
            if(lewy->pozycja == NULL)
            {
                rodzic->lewy = nowy;
                return 0;
            }
            else
            {
                rodzic = rodzic->lewy;
            }
        }
        else
        {
            if(prawy->pozycja == NULL)
            {
                rodzic->prawy = nowy;
                return 0;
            }
            else
            {
                rodzic = rodzic->prawy;
            }
        }
        
    }
    return 0;
}

int Liczba_wezlow(Wezel* korzen)
{
    if(korzen == NULL)
        return 0;
    else
        return (Liczba_wezlow(korzen->lewy)+1+Liczba_wezlow(korzen->prawy));
}

Wezel* max(Wezel* korzen)
{
	if(korzen == NULL)
		printf("Drzewo jest puste");
	if(korzen->prawy==NULL)
	{
		return korzen;
	}
	else
	{
		max(Wezel->prawy);
	}
}

Wezel* Search(Wezel* wezel, int* cena)
{
	
	int i;

	if(wezel==NULL)
		{
			return NULL;
		}

	if(wezel>cena)
	{
		return Search(wezel->lewy, cena);
	}

	else if(wezel<cena)
	{
		return Search(wezel->prawy, cena);
	}
	else
	{
		return wezel;
	}
}

int Wysokosc_drzewa(Wezel* korzen)
{
    if(korzen == NULL)
        return 0;
    int lewe, prawe;
    if(korzen->lewy == NULL)
        lewe = 0;
    else
        lewe = Wysokosc_drzewa(korzen->lewy)+1;
    if(korzen->prawy == NULL)
        prawe = 0;
    else
        prawe = Wysokosc_drzewa(korzen->prawy)+1;
    if(lewe >= prawe)
        return lewe;
    else
        return prawe;
}

void inorder(Wezel* korzen)
{
    if(korzen->lewy != NULL)
        inorder(korzen->lewy);
    printf("%s  %s  %s  %d\n", korzen->wycieczka.kraj, korzen->wycieczka.miasto, korzen->wycieczka.data, korzen->wycieczka.cena);
    if(korzen->prawy != NULL)
        inorder(korzen->prawy);
}


Wezel* MIN(Wezel *korzen)
{
  if(korzen == NULL)
	printf("Drzewo jest puste");
  else
  {
	if(korzen->lewy == NULL)
        return korzen;
	else
        MIN(korzen->lewy);
  }
}

/*funkcja szuka wycieczek do danego kraju - nie wiem czy dziala...*/
void szukajkraj(Wezel* korzen, char* szukane)
{
    if(korzen->lewy != NULL)
        szukajkraj(korzen->lewy);
    if(strcmp(szukane, korzen->wycieczka.kraj) == 0) 
    	printf("%s  %s  %s  %d\n", korzen->wycieczka.kraj, korzen->wycieczka.miasto, korzen->wycieczka.data, korzen->wycieczka.cena);
    if(korzen->prawy != NULL)
        szukajkraj(korzen->prawy);
}
